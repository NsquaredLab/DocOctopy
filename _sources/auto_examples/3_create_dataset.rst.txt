
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path("data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_pipeline_after_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:02<00:02,  2.18s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  1.97s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  2.00s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 17/317 [00:00<00:01, 161.28it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  11%|█         | 35/317 [00:00<00:01, 168.74it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  17%|█▋        | 53/317 [00:00<00:01, 171.29it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  22%|██▏       | 71/317 [00:00<00:01, 172.74it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 89/317 [00:00<00:01, 173.58it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  34%|███▍      | 107/317 [00:00<00:01, 173.73it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 125/317 [00:00<00:01, 169.77it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  45%|████▍     | 142/317 [00:00<00:01, 161.99it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  50%|█████     | 159/317 [00:00<00:00, 163.41it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  56%|█████▌    | 176/317 [00:01<00:00, 164.28it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  61%|██████    | 193/317 [00:01<00:00, 164.61it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 210/317 [00:01<00:00, 165.33it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  72%|███████▏  | 227/317 [00:01<00:00, 165.35it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  77%|███████▋  | 244/317 [00:01<00:00, 165.66it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  82%|████████▏ | 261/317 [00:02<00:00, 57.94it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  88%|████████▊ | 279/317 [00:02<00:00, 73.40it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  94%|█████████▎| 297/317 [00:02<00:00, 89.57it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  99%|█████████▉| 315/317 [00:02<00:00, 105.52it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 126.02it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path("data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.18s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.12s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.13s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<07:52,  1.50s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   7%|▋         | 21/317 [00:01<00:16, 18.00it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  13%|█▎        | 41/317 [00:01<00:07, 38.01it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  19%|█▉        | 61/317 [00:01<00:04, 59.78it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  26%|██▌       | 81/317 [00:01<00:02, 82.07it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  32%|███▏      | 101/317 [00:02<00:02, 103.51it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  38%|███▊      | 121/317 [00:02<00:01, 123.02it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  44%|████▍     | 141/317 [00:02<00:01, 139.78it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  51%|█████     | 161/317 [00:02<00:01, 152.53it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  57%|█████▋    | 180/317 [00:02<00:00, 160.47it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  63%|██████▎   | 199/317 [00:02<00:00, 164.89it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  69%|██████▉   | 218/317 [00:02<00:00, 170.62it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  75%|███████▍  | 237/317 [00:02<00:00, 175.09it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  81%|████████  | 256/317 [00:02<00:00, 176.27it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  87%|████████▋ | 275/317 [00:02<00:00, 171.67it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  92%|█████████▏| 293/317 [00:03<00:00, 173.06it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  98%|█████████▊| 312/317 [00:03<00:00, 176.75it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 99.28it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   6%|▌         | 19/317 [00:00<00:01, 183.40it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  12%|█▏        | 39/317 [00:00<00:01, 191.86it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  19%|█▊        | 59/317 [00:00<00:01, 194.24it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  25%|██▍       | 79/317 [00:00<00:01, 194.60it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  31%|███       | 99/317 [00:00<00:01, 195.46it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  38%|███▊      | 119/317 [00:00<00:01, 196.54it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  44%|████▍     | 139/317 [00:00<00:00, 197.27it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  50%|█████     | 159/317 [00:00<00:00, 197.87it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  56%|█████▋    | 179/317 [00:00<00:00, 198.15it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  63%|██████▎   | 199/317 [00:01<00:00, 197.20it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  69%|██████▉   | 219/317 [00:01<00:00, 193.30it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  75%|███████▌  | 239/317 [00:01<00:00, 190.45it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  82%|████████▏ | 259/317 [00:01<00:00, 188.46it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  88%|████████▊ | 278/317 [00:01<00:00, 187.17it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  94%|█████████▎| 297/317 [00:01<00:00, 186.32it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|█████████▉| 316/317 [00:01<00:00, 185.56it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 191.46it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 13/317 [00:00<00:02, 127.99it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 29/317 [00:00<00:01, 145.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 45/317 [00:00<00:01, 151.29it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▉        | 61/317 [00:00<00:01, 153.93it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  24%|██▍       | 77/317 [00:00<00:01, 149.00it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  29%|██▉       | 93/317 [00:00<00:01, 151.39it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  34%|███▍      | 109/317 [00:00<00:01, 149.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 124/317 [00:00<00:01, 148.85it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▍     | 139/317 [00:00<00:01, 149.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  49%|████▊     | 154/317 [00:01<00:01, 149.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  53%|█████▎    | 169/317 [00:01<00:00, 149.14it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  58%|█████▊    | 184/317 [00:01<00:00, 148.97it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  63%|██████▎   | 199/317 [00:01<00:00, 140.48it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  68%|██████▊   | 214/317 [00:01<00:00, 133.69it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  73%|███████▎  | 230/317 [00:01<00:00, 138.56it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  78%|███████▊  | 246/317 [00:01<00:00, 141.95it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  82%|████████▏ | 261/317 [00:01<00:00, 143.59it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  87%|████████▋ | 277/317 [00:01<00:00, 145.56it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  92%|█████████▏| 292/317 [00:02<00:00, 146.61it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  97%|█████████▋| 307/317 [00:02<00:00, 147.38it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 146.07it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.725 seconds)

**Estimated memory usage:**  932 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
