
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path("data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_pipeline_after_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.94s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.89s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.90s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 155.41it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  10%|█         | 33/317 [00:00<00:01, 163.16it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▌        | 50/317 [00:00<00:01, 165.89it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  21%|██        | 67/317 [00:00<00:01, 163.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  26%|██▋       | 84/317 [00:00<00:01, 160.94it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  32%|███▏      | 102/317 [00:00<00:01, 165.20it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 119/317 [00:00<00:01, 164.13it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  43%|████▎     | 136/317 [00:00<00:01, 163.37it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  48%|████▊     | 153/317 [00:00<00:01, 158.48it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  54%|█████▎    | 170/317 [00:01<00:00, 159.55it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  59%|█████▉    | 187/317 [00:01<00:00, 160.55it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  64%|██████▍   | 204/317 [00:01<00:00, 161.01it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  70%|██████▉   | 221/317 [00:01<00:00, 159.84it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  75%|███████▍  | 237/317 [00:01<00:00, 159.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  80%|███████▉  | 253/317 [00:02<00:01, 58.59it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  85%|████████▌ | 271/317 [00:02<00:00, 74.61it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  91%|█████████ | 289/317 [00:02<00:00, 91.25it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  97%|█████████▋| 307/317 [00:02<00:00, 107.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 125.70it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path("data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.16s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.09s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.10s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:03,  1.53s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   5%|▌         | 17/317 [00:01<00:21, 14.24it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  11%|█         | 34/317 [00:01<00:09, 30.95it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  16%|█▌        | 50/317 [00:01<00:05, 48.14it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  21%|██        | 66/317 [00:01<00:03, 66.00it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  26%|██▌       | 82/317 [00:02<00:02, 83.39it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  31%|███       | 98/317 [00:02<00:02, 99.45it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  36%|███▌      | 114/317 [00:02<00:01, 113.33it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  41%|████      | 130/317 [00:02<00:01, 124.76it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  46%|████▌     | 146/317 [00:02<00:01, 130.72it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  51%|█████     | 162/317 [00:02<00:01, 137.03it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  56%|█████▌    | 178/317 [00:02<00:01, 138.61it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  61%|██████    | 194/317 [00:02<00:00, 143.14it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  66%|██████▌   | 210/317 [00:02<00:00, 146.58it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  71%|███████▏  | 226/317 [00:02<00:00, 148.99it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  76%|███████▋  | 242/317 [00:03<00:00, 150.94it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  81%|████████▏ | 258/317 [00:03<00:00, 152.26it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  86%|████████▋ | 274/317 [00:03<00:00, 153.13it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  91%|█████████▏| 290/317 [00:03<00:00, 153.79it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  97%|█████████▋| 306/317 [00:03<00:00, 154.27it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 89.00it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   6%|▌         | 18/317 [00:00<00:01, 173.72it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  12%|█▏        | 38/317 [00:00<00:01, 188.20it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  18%|█▊        | 58/317 [00:00<00:01, 192.58it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  25%|██▍       | 78/317 [00:00<00:01, 194.33it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  31%|███       | 98/317 [00:00<00:01, 186.76it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  37%|███▋      | 117/317 [00:00<00:01, 186.36it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  43%|████▎     | 136/317 [00:00<00:00, 186.03it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  49%|████▉     | 155/317 [00:00<00:00, 185.50it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  55%|█████▍    | 174/317 [00:00<00:00, 185.24it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  61%|██████    | 193/317 [00:01<00:00, 185.10it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  67%|██████▋   | 212/317 [00:01<00:00, 184.23it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  73%|███████▎  | 231/317 [00:01<00:00, 177.87it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  79%|███████▉  | 250/317 [00:01<00:00, 180.00it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  85%|████████▍ | 269/317 [00:01<00:00, 181.32it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  91%|█████████ | 288/317 [00:01<00:00, 173.14it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  97%|█████████▋| 307/317 [00:01<00:00, 176.22it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 182.27it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 13/317 [00:00<00:02, 126.76it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 28/317 [00:00<00:02, 138.54it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 44/317 [00:00<00:01, 147.00it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▉        | 60/317 [00:00<00:01, 149.90it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  24%|██▍       | 76/317 [00:00<00:01, 152.28it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  29%|██▉       | 92/317 [00:00<00:01, 151.59it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  34%|███▍      | 108/317 [00:00<00:01, 149.03it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 123/317 [00:00<00:01, 148.01it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▎     | 138/317 [00:00<00:01, 147.71it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  48%|████▊     | 153/317 [00:01<00:01, 147.48it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  53%|█████▎    | 168/317 [00:01<00:01, 147.47it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  58%|█████▊    | 183/317 [00:01<00:00, 142.30it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  62%|██████▏   | 198/317 [00:01<00:00, 144.34it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  67%|██████▋   | 213/317 [00:01<00:00, 145.51it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  72%|███████▏  | 228/317 [00:01<00:00, 145.64it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  77%|███████▋  | 243/317 [00:01<00:00, 145.26it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  81%|████████▏ | 258/317 [00:01<00:00, 145.34it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  86%|████████▌ | 273/317 [00:01<00:00, 145.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  91%|█████████ | 288/317 [00:01<00:00, 143.28it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  96%|█████████▌| 303/317 [00:02<00:00, 144.81it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 146.04it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.868 seconds)

**Estimated memory usage:**  944 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
