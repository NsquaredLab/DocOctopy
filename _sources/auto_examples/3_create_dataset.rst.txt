
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path(r"data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_after_pipeline_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_pipeline_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:02<00:02,  2.24s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  2.33s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  2.31s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 151.69it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  10%|█         | 32/317 [00:00<00:01, 151.23it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▌        | 50/317 [00:00<00:01, 159.97it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  21%|██▏       | 68/317 [00:00<00:01, 164.07it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  27%|██▋       | 85/317 [00:00<00:01, 166.13it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  32%|███▏      | 103/317 [00:00<00:01, 167.86it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 120/317 [00:00<00:01, 166.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  43%|████▎     | 137/317 [00:00<00:01, 164.58it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  49%|████▊     | 154/317 [00:00<00:00, 163.42it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  54%|█████▍    | 171/317 [00:01<00:00, 162.29it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  59%|█████▉    | 188/317 [00:01<00:00, 161.41it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  65%|██████▍   | 205/317 [00:01<00:00, 156.14it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  70%|██████▉   | 221/317 [00:01<00:00, 156.73it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  75%|███████▍  | 237/317 [00:01<00:00, 157.42it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  80%|███████▉  | 253/317 [00:02<00:01, 40.12it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  85%|████████▌ | 270/317 [00:02<00:00, 52.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  91%|█████████ | 288/317 [00:02<00:00, 67.30it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  97%|█████████▋| 306/317 [00:02<00:00, 83.16it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 107.08it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path(r"data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.49s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.47s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.47s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:25,  1.60s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   6%|▌         | 19/317 [00:01<00:19, 15.27it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  12%|█▏        | 38/317 [00:01<00:08, 33.49it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  18%|█▊        | 57/317 [00:01<00:04, 53.71it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  24%|██▍       | 76/317 [00:02<00:03, 74.80it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  30%|██▉       | 95/317 [00:02<00:02, 95.51it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  36%|███▌      | 114/317 [00:02<00:01, 114.59it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  42%|████▏     | 133/317 [00:02<00:01, 131.33it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  48%|████▊     | 152/317 [00:02<00:01, 144.93it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  54%|█████▍    | 171/317 [00:02<00:00, 155.72it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  60%|█████▉    | 190/317 [00:02<00:00, 164.05it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  66%|██████▌   | 209/317 [00:02<00:00, 164.90it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  72%|███████▏  | 227/317 [00:02<00:00, 168.80it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  77%|███████▋  | 245/317 [00:02<00:00, 171.91it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  83%|████████▎ | 263/317 [00:03<00:00, 170.90it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  89%|████████▊ | 281/317 [00:03<00:00, 172.79it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  94%|█████████▍| 299/317 [00:03<00:00, 174.54it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 175.61it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 94.82it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   6%|▌         | 18/317 [00:00<00:01, 174.50it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  12%|█▏        | 38/317 [00:00<00:01, 184.38it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  18%|█▊        | 58/317 [00:00<00:01, 186.99it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  24%|██▍       | 77/317 [00:00<00:01, 188.12it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  31%|███       | 97/317 [00:00<00:01, 189.84it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  37%|███▋      | 116/317 [00:00<00:01, 189.54it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  43%|████▎     | 136/317 [00:00<00:00, 190.39it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  49%|████▉     | 156/317 [00:00<00:00, 187.28it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  56%|█████▌    | 176/317 [00:00<00:00, 189.37it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  62%|██████▏   | 196/317 [00:01<00:00, 190.29it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  68%|██████▊   | 216/317 [00:01<00:00, 187.04it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  74%|███████▍  | 235/317 [00:01<00:00, 184.91it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  80%|████████  | 254/317 [00:01<00:00, 183.50it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  86%|████████▌ | 273/317 [00:01<00:00, 182.17it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  92%|█████████▏| 292/317 [00:01<00:00, 180.35it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  98%|█████████▊| 311/317 [00:01<00:00, 179.84it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 184.87it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 12/317 [00:00<00:02, 119.08it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 28/317 [00:00<00:02, 137.83it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 44/317 [00:00<00:01, 144.28it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▉        | 60/317 [00:00<00:01, 147.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  24%|██▎       | 75/317 [00:00<00:01, 143.56it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 90/317 [00:00<00:01, 144.70it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 105/317 [00:00<00:01, 143.35it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 120/317 [00:00<00:01, 142.72it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  43%|████▎     | 135/317 [00:00<00:01, 142.22it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  47%|████▋     | 150/317 [00:01<00:01, 142.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  52%|█████▏    | 165/317 [00:01<00:01, 142.08it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  57%|█████▋    | 180/317 [00:01<00:00, 142.14it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  62%|██████▏   | 195/317 [00:01<00:00, 141.87it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 210/317 [00:01<00:00, 141.67it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  71%|███████   | 225/317 [00:01<00:00, 137.59it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  75%|███████▌  | 239/317 [00:01<00:00, 137.53it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  80%|███████▉  | 253/317 [00:01<00:00, 137.51it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  85%|████████▍ | 268/317 [00:01<00:00, 138.68it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  89%|████████▉ | 282/317 [00:02<00:00, 138.74it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  94%|█████████▎| 297/317 [00:02<00:00, 139.31it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  98%|█████████▊| 312/317 [00:02<00:00, 139.72it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 140.69it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.937 seconds)

**Estimated memory usage:**  989 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
