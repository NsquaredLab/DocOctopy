
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path("data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_after_pipeline_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_pipeline_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:02<00:02,  2.16s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  2.21s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:04<00:00,  2.21s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 156.08it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  10%|█         | 33/317 [00:00<00:01, 163.91it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▌        | 50/317 [00:00<00:01, 165.87it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  21%|██▏       | 68/317 [00:00<00:01, 168.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  27%|██▋       | 86/317 [00:00<00:01, 169.81it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 104/317 [00:00<00:01, 170.62it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 122/317 [00:00<00:01, 168.00it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▍     | 139/317 [00:00<00:01, 165.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  49%|████▉     | 156/317 [00:00<00:00, 163.52it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  55%|█████▍    | 173/317 [00:01<00:00, 162.35it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  60%|█████▉    | 190/317 [00:01<00:00, 162.02it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  65%|██████▌   | 207/317 [00:01<00:00, 162.10it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  71%|███████   | 224/317 [00:01<00:00, 162.20it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  76%|███████▌  | 241/317 [00:01<00:00, 161.95it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  81%|████████▏ | 258/317 [00:02<00:01, 55.87it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  87%|████████▋ | 276/317 [00:02<00:00, 70.96it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  93%|█████████▎| 294/317 [00:02<00:00, 86.89it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  98%|█████████▊| 312/317 [00:02<00:00, 102.67it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 122.99it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path("data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.46s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.44s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.44s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:22,  1.59s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   6%|▋         | 20/317 [00:01<00:18, 16.24it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  13%|█▎        | 40/317 [00:01<00:07, 35.45it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  19%|█▉        | 60/317 [00:01<00:04, 56.54it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  25%|██▌       | 80/317 [00:02<00:03, 78.33it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  32%|███▏      | 100/317 [00:02<00:02, 99.54it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  38%|███▊      | 120/317 [00:02<00:01, 118.93it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  44%|████▍     | 139/317 [00:02<00:01, 134.61it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  50%|█████     | 159/317 [00:02<00:01, 148.75it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  56%|█████▋    | 179/317 [00:02<00:00, 159.71it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  62%|██████▏   | 198/317 [00:02<00:00, 167.25it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  68%|██████▊   | 217/317 [00:02<00:00, 171.36it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  74%|███████▍  | 236/317 [00:02<00:00, 174.59it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  80%|████████  | 255/317 [00:02<00:00, 176.87it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  86%|████████▋ | 274/317 [00:03<00:00, 178.51it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  92%|█████████▏| 293/317 [00:03<00:00, 179.71it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  98%|█████████▊| 312/317 [00:03<00:00, 179.91it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 96.66it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   5%|▌         | 16/317 [00:00<00:01, 154.69it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  11%|█▏        | 36/317 [00:00<00:01, 178.46it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  18%|█▊        | 56/317 [00:00<00:01, 185.06it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  24%|██▍       | 76/317 [00:00<00:01, 188.20it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  30%|███       | 96/317 [00:00<00:01, 191.12it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  37%|███▋      | 116/317 [00:00<00:01, 193.13it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  43%|████▎     | 136/317 [00:00<00:00, 193.59it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  49%|████▉     | 156/317 [00:00<00:00, 194.64it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  56%|█████▌    | 176/317 [00:00<00:00, 195.67it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  62%|██████▏   | 196/317 [00:01<00:00, 195.20it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  68%|██████▊   | 216/317 [00:01<00:00, 191.37it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  74%|███████▍  | 236/317 [00:01<00:00, 189.03it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  80%|████████  | 255/317 [00:01<00:00, 187.77it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  86%|████████▋ | 274/317 [00:01<00:00, 186.32it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  92%|█████████▏| 293/317 [00:01<00:00, 185.24it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  98%|█████████▊| 312/317 [00:01<00:00, 178.94it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 186.91it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 13/317 [00:00<00:02, 124.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 29/317 [00:00<00:02, 141.98it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 45/317 [00:00<00:01, 148.07it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▉        | 61/317 [00:00<00:01, 150.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  24%|██▍       | 77/317 [00:00<00:01, 151.55it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  29%|██▉       | 93/317 [00:00<00:01, 150.82it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  34%|███▍      | 109/317 [00:00<00:01, 149.15it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 124/317 [00:00<00:01, 147.71it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▍     | 139/317 [00:00<00:01, 147.01it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  49%|████▊     | 154/317 [00:01<00:01, 147.03it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  53%|█████▎    | 169/317 [00:01<00:01, 146.95it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  58%|█████▊    | 184/317 [00:01<00:00, 146.33it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  63%|██████▎   | 199/317 [00:01<00:00, 146.02it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  68%|██████▊   | 214/317 [00:01<00:00, 145.45it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  72%|███████▏  | 229/317 [00:01<00:00, 141.88it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  77%|███████▋  | 244/317 [00:01<00:00, 142.78it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  82%|████████▏ | 259/317 [00:01<00:00, 142.78it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  86%|████████▋ | 274/317 [00:01<00:00, 143.25it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  91%|█████████ | 289/317 [00:01<00:00, 143.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  96%|█████████▌| 304/317 [00:02<00:00, 143.62it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 145.25it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 19.950 seconds)

**Estimated memory usage:**  983 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
