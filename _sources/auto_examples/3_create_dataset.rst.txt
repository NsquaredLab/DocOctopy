
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path("data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_pipeline_after_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.88s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.87s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.87s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 157.42it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  11%|█         | 34/317 [00:00<00:01, 166.27it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▋        | 52/317 [00:00<00:01, 168.04it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  22%|██▏       | 70/317 [00:00<00:01, 169.83it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 88/317 [00:00<00:01, 171.53it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 106/317 [00:00<00:01, 172.27it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  39%|███▉      | 124/317 [00:00<00:01, 168.77it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▍     | 141/317 [00:00<00:01, 166.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  50%|████▉     | 158/317 [00:00<00:00, 165.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  55%|█████▌    | 175/317 [00:01<00:00, 163.04it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  61%|██████    | 192/317 [00:01<00:00, 163.54it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 209/317 [00:01<00:00, 163.84it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  71%|███████▏  | 226/317 [00:01<00:00, 163.20it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  77%|███████▋  | 243/317 [00:01<00:00, 163.99it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  82%|████████▏ | 260/317 [00:02<00:01, 56.18it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  88%|████████▊ | 278/317 [00:02<00:00, 71.17it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  93%|█████████▎| 296/317 [00:02<00:00, 87.10it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  99%|█████████▉| 314/317 [00:02<00:00, 102.82it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 123.85it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path("data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.19s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.14s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.14s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:17,  1.57s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   7%|▋         | 21/317 [00:01<00:17, 17.16it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  13%|█▎        | 40/317 [00:01<00:07, 35.39it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  19%|█▉        | 60/317 [00:01<00:04, 56.68it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  25%|██▌       | 80/317 [00:01<00:03, 78.71it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  31%|███       | 99/317 [00:02<00:02, 98.86it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  37%|███▋      | 117/317 [00:02<00:01, 114.72it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  43%|████▎     | 137/317 [00:02<00:01, 132.57it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  49%|████▉     | 156/317 [00:02<00:01, 144.54it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  55%|█████▌    | 175/317 [00:02<00:00, 154.51it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  61%|██████    | 194/317 [00:02<00:00, 155.74it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  67%|██████▋   | 213/317 [00:02<00:00, 163.07it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  73%|███████▎  | 232/317 [00:02<00:00, 168.48it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  79%|███████▉  | 251/317 [00:02<00:00, 172.05it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  85%|████████▌ | 270/317 [00:03<00:00, 175.16it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  91%|█████████ | 289/317 [00:03<00:00, 177.25it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  97%|█████████▋| 308/317 [00:03<00:00, 179.13it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 96.05it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   5%|▌         | 16/317 [00:00<00:01, 159.16it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  11%|█         | 35/317 [00:00<00:01, 175.95it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  17%|█▋        | 54/317 [00:00<00:01, 178.86it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  23%|██▎       | 74/317 [00:00<00:01, 183.77it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  29%|██▉       | 93/317 [00:00<00:01, 184.19it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  35%|███▌      | 112/317 [00:00<00:01, 182.79it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  41%|████▏     | 131/317 [00:00<00:01, 178.54it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  47%|████▋     | 150/317 [00:00<00:00, 179.47it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  53%|█████▎    | 168/317 [00:00<00:00, 179.40it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  59%|█████▉    | 187/317 [00:01<00:00, 179.61it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  65%|██████▍   | 206/317 [00:01<00:00, 180.13it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  71%|███████   | 225/317 [00:01<00:00, 180.55it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  77%|███████▋  | 244/317 [00:01<00:00, 180.83it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  83%|████████▎ | 263/317 [00:01<00:00, 181.36it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  89%|████████▉ | 282/317 [00:01<00:00, 181.84it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  95%|█████████▍| 301/317 [00:01<00:00, 181.34it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 180.40it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 12/317 [00:00<00:02, 118.17it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▊         | 27/317 [00:00<00:02, 136.49it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  13%|█▎        | 41/317 [00:00<00:02, 136.07it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  18%|█▊        | 57/317 [00:00<00:01, 143.96it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  23%|██▎       | 73/317 [00:00<00:01, 147.25it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  28%|██▊       | 88/317 [00:00<00:01, 148.15it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  32%|███▏      | 103/317 [00:00<00:01, 147.50it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  37%|███▋      | 118/317 [00:00<00:01, 147.29it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  42%|████▏     | 133/317 [00:00<00:01, 146.81it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  47%|████▋     | 148/317 [00:01<00:01, 146.53it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  51%|█████▏    | 163/317 [00:01<00:01, 146.58it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  56%|█████▌    | 178/317 [00:01<00:00, 146.12it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  61%|██████    | 193/317 [00:01<00:00, 140.61it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  66%|██████▌   | 208/317 [00:01<00:00, 142.49it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  70%|███████   | 223/317 [00:01<00:00, 143.95it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  75%|███████▌  | 238/317 [00:01<00:00, 144.77it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  80%|███████▉  | 253/317 [00:01<00:00, 145.18it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  85%|████████▍ | 268/317 [00:01<00:00, 145.17it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  89%|████████▉ | 283/317 [00:01<00:00, 145.13it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  94%|█████████▍| 298/317 [00:02<00:00, 145.63it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  99%|█████████▊| 313/317 [00:02<00:00, 145.90it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 144.57it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.840 seconds)

**Estimated memory usage:**  933 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
