
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/3_create_dataset.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_3_create_dataset.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_3_create_dataset.py:


Creating a dataset
===========================

This example shows how to create a dataset for training a deep learning model.


.. GENERATED FROM PYTHON SOURCE LINES 11-14

In this example we will create a dataset that was used in our real-time paper [1]_.

.. [1] Sîmpetru, R.C., März, M., Del Vecchio, A., 2023. Proportional and Simultaneous Real-Time Control of the Full Human Hand From High-Density Electromyography. IEEE TNSRE 31, 3118–3131. https://doi.org/10/gsgk4s

.. GENERATED FROM PYTHON SOURCE LINES 14-75

.. code-block:: Python

    from functools import partial
    from pathlib import Path

    import numpy as np
    from scipy.signal import butter

    from doc_octopy.datasets.filters.emg_augmentations import WaveletDecomposition
    from doc_octopy.datasets.filters.generic import ApplyFunctionFilter, IndexDataFilter
    from doc_octopy.datasets.filters.temporal import SOSFrequencyFilter
    from doc_octopy.datasets.supervised import EMGDataset

    dataset = EMGDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        sampling_frequency=2044.0,
        tasks_to_use=["1", "2"],
        save_path=Path("data/dataset.zarr").resolve(),
        emg_filter_pipeline_after_chunking=[
            [
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(
                        4, [47.5, 52.5], "bandstop", output="sos", fs=2044
                    ),
                    is_output=True,
                    name="Raw No Powerline",
                ),
                SOSFrequencyFilter(
                    sos_filter_coefficients=butter(4, 20, "lowpass", output="sos", fs=2044),
                    is_output=True,
                    name="Raw No Powerline Lowpassed 20 Hz",
                ),
            ]
        ],
        emg_representations_to_filter_after_chunking=["Last"],
        ground_truth_filter_pipeline_before_chunking=[
            [
                ApplyFunctionFilter(function=np.reshape, newshape=(63, -1)),
                IndexDataFilter(indices=(slice(3, 63),)),
            ]
        ],
        ground_truth_representations_to_filter_before_chunking=["Input"],
        ground_truth_filter_pipeline_after_chunking=[
            [
                ApplyFunctionFilter(
                    function=partial(np.mean, axis=-1),
                    is_output=True,
                    name="Mean Kinematics per EMG Chunk",
                ),
            ]
        ],
        ground_truth_representations_to_filter_after_chunking=["Last"],
        testing_split_ratio=0.3,
        validation_split_ratio=0.1,
        augmentation_pipelines=[
            [WaveletDecomposition(nr_of_grids=5, is_output=True, level=2)]
        ],
    )

    dataset.create_dataset()






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.87s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.89s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:03<00:00,  1.89s/it]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   5%|▌         | 16/317 [00:00<00:01, 159.07it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  11%|█         | 34/317 [00:00<00:01, 166.03it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  16%|█▋        | 52/317 [00:00<00:01, 168.68it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  22%|██▏       | 69/317 [00:00<00:01, 168.89it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  27%|██▋       | 86/317 [00:00<00:01, 162.46it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  33%|███▎      | 104/317 [00:00<00:01, 166.10it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 121/317 [00:00<00:01, 164.56it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  44%|████▎     | 138/317 [00:00<00:01, 163.80it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  49%|████▉     | 155/317 [00:00<00:00, 164.21it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  54%|█████▍    | 172/317 [00:01<00:00, 163.91it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  60%|█████▉    | 189/317 [00:01<00:00, 163.83it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  65%|██████▍   | 206/317 [00:01<00:00, 163.76it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  70%|███████   | 223/317 [00:01<00:00, 163.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  76%|███████▌  | 240/317 [00:01<00:00, 163.08it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  81%|████████  | 257/317 [00:02<00:01, 56.33it/s]     Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  86%|████████▋ | 274/317 [00:02<00:00, 70.46it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  92%|█████████▏| 291/317 [00:02<00:00, 85.46it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  97%|█████████▋| 309/317 [00:02<00:00, 101.54it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 123.21it/s]




.. GENERATED FROM PYTHON SOURCE LINES 76-79

Default dataset are also available. Here is an example of how to use the EMBCDataset used in [2]_.

.. [2] Sîmpetru, R.C., Osswald, M., Braun, D.I., Souza de Oliveira, D., Cakici, A.L., Del Vecchio, A., 2022. Accurate continuous prediction of 14 degrees of freedom of the hand from myoelectrical signals through convolutive deep learning, in: Proceedings of the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC). Presented at the 2022 44th Annual International Conference of the IEEE Engineering in Medicine & Biology Society (EMBC), pp. 702–706. https://doi.org/10/gq2f47

.. GENERATED FROM PYTHON SOURCE LINES 79-89

.. code-block:: Python

    from doc_octopy.datasets.defaults import EMBCDataset

    dataset = EMBCDataset(
        emg_data_path=Path("data/emg.pkl").resolve(),
        ground_truth_data_path=Path("data/kinematics.pkl").resolve(),
        save_path=Path("data/dataset.zarr").resolve(),
        tasks_to_use=["1", "2"],
    )

    dataset.create_dataset()




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Filtering and splitting data:   0%|          | 0/2 [00:00<?, ?it/s]    Filtering and splitting data:  50%|█████     | 1/2 [00:01<00:01,  1.17s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.14s/it]    Filtering and splitting data: 100%|██████████| 2/2 [00:02<00:00,  1.14s/it]
    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:   0%|          | 1/317 [00:01<08:36,  1.64s/it]    Augmenting with [GaussianNoise (GaussianNoise)]:   6%|▋         | 20/317 [00:01<00:18, 15.82it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  12%|█▏        | 39/317 [00:01<00:08, 33.72it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  18%|█▊        | 58/317 [00:01<00:04, 53.55it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  24%|██▍       | 77/317 [00:02<00:03, 74.39it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  30%|███       | 96/317 [00:02<00:02, 95.02it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  36%|███▋      | 115/317 [00:02<00:01, 114.21it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  42%|████▏     | 134/317 [00:02<00:01, 130.75it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  48%|████▊     | 153/317 [00:02<00:01, 143.00it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  54%|█████▍    | 172/317 [00:02<00:00, 153.09it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  60%|██████    | 191/317 [00:02<00:00, 159.79it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  66%|██████▌   | 210/317 [00:02<00:00, 165.49it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  72%|███████▏  | 229/317 [00:02<00:00, 169.36it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  78%|███████▊  | 248/317 [00:02<00:00, 172.71it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  84%|████████▍ | 267/317 [00:03<00:00, 173.48it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  90%|████████▉ | 285/317 [00:03<00:00, 174.27it/s]    Augmenting with [GaussianNoise (GaussianNoise)]:  96%|█████████▌| 304/317 [00:03<00:00, 176.72it/s]    Augmenting with [GaussianNoise (GaussianNoise)]: 100%|██████████| 317/317 [00:03<00:00, 94.18it/s] 
    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:   6%|▌         | 18/317 [00:00<00:01, 175.46it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  12%|█▏        | 38/317 [00:00<00:01, 186.69it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  18%|█▊        | 58/317 [00:00<00:01, 190.06it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  25%|██▍       | 78/317 [00:00<00:01, 191.05it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  31%|███       | 98/317 [00:00<00:01, 191.10it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  37%|███▋      | 118/317 [00:00<00:01, 192.43it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  44%|████▎     | 138/317 [00:00<00:00, 191.75it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  50%|████▉     | 158/317 [00:00<00:00, 193.09it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  56%|█████▌    | 178/317 [00:00<00:00, 194.62it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  62%|██████▏   | 198/317 [00:01<00:00, 192.88it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  69%|██████▉   | 218/317 [00:01<00:00, 182.33it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  75%|███████▍  | 237/317 [00:01<00:00, 181.95it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  81%|████████  | 256/317 [00:01<00:00, 181.49it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  87%|████████▋ | 275/317 [00:01<00:00, 181.12it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  93%|█████████▎| 294/317 [00:01<00:00, 179.98it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]:  99%|█████████▊| 313/317 [00:01<00:00, 179.65it/s]    Augmenting with [MagnitudeWarping (MagnitudeWarping)]: 100%|██████████| 317/317 [00:01<00:00, 185.34it/s]
    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   0%|          | 0/317 [00:00<?, ?it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   4%|▍         | 12/317 [00:00<00:02, 116.83it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:   9%|▉         | 28/317 [00:00<00:02, 138.94it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  14%|█▍        | 44/317 [00:00<00:01, 144.35it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  19%|█▉        | 60/317 [00:00<00:01, 148.02it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  24%|██▍       | 76/317 [00:00<00:01, 150.18it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  29%|██▉       | 92/317 [00:00<00:01, 148.82it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  34%|███▍      | 107/317 [00:00<00:01, 141.44it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  38%|███▊      | 122/317 [00:00<00:01, 142.49it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  43%|████▎     | 137/317 [00:00<00:01, 142.60it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  48%|████▊     | 152/317 [00:01<00:01, 143.91it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  53%|█████▎    | 167/317 [00:01<00:01, 144.87it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  57%|█████▋    | 182/317 [00:01<00:00, 143.59it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  62%|██████▏   | 197/317 [00:01<00:00, 144.42it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  67%|██████▋   | 212/317 [00:01<00:00, 144.39it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  72%|███████▏  | 227/317 [00:01<00:00, 143.04it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  76%|███████▋  | 242/317 [00:01<00:00, 143.69it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  81%|████████  | 257/317 [00:01<00:00, 141.65it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  86%|████████▌ | 272/317 [00:01<00:00, 141.20it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  91%|█████████ | 287/317 [00:02<00:00, 141.33it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]:  95%|█████████▌| 302/317 [00:02<00:00, 143.11it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 143.05it/s]    Augmenting with [WaveletDecomposition (WaveletDecomposition)]: 100%|██████████| 317/317 [00:02<00:00, 143.26it/s]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.971 seconds)

**Estimated memory usage:**  932 MB


.. _sphx_glr_download_auto_examples_3_create_dataset.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 3_create_dataset.ipynb <3_create_dataset.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 3_create_dataset.py <3_create_dataset.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 3_create_dataset.zip <3_create_dataset.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
